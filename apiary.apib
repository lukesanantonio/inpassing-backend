FORMAT: 1A
HOST: http://polls.apiblueprint.org/

# inpassing

A web API for managing the lending and borrowing of passes.

## Group Orgs

## Org [/orgs]

+ Attribute
    + id: 2 (number)
    + name: Locust Valley High School (string)

### Create a new org [POST]

+ Request (application/json)

        {
            "name": "Locust Valley High School"
        }

+ Response 201

    + Headers

            Location: /orgs/2

### Search orgs by name [GET /orgs/search{?q}]

+ Parameters

    - q: `Locust Valley` (string) - Query string

+ Response 200 (application/json)

        [
            {
                "id": 2,
                "name": "Locust Valley High School"
            }
        ]

### Query an org [GET /orgs/{id}]

+ Parameters

    - id (number) - Org ID

+ Request Anonymous

    Without authentication, only basic information about an org will be returned.

    + Body

+ Response 200 (application/json)

    + Attributes (Org)

+ Request Authenticated

    Use authentication to get more information about an org relevant to the user's role in that org.

    + Header

            Authorization: Bearer JWT

+ Response 200 (application/json)

    + Attributes (Org)
        + greeting_fmt: `Today is a {} day` (string) - The greeting format
        
    
## Org Participant collection [/orgs/{id}/participants]

### Query participants [GET]

Returns a list of participants of a given org.

+ Request

    + Headers
    
            Authorization: Bearer JWT
            
+ Response 200 (application/json)
    
    + Attributes (array[User])

+ Response 403

    The authenticated user must be a mod of this organization.

    + Body

### Add user [POST]

Makes a user a participant of an org. This must either be a user adding itself or a mod adding people.

+ Request (application/json)

    + Headers
    
            Authorization: Bearer JWT
            
    + Attributes
        + user_id: 2 (number) - The user to make a participant of this organization.
        
+ Response 202 (application/json)

    The org will receive the users request to participate in an org.
    
    + Body

+ Response 204 (application/json)

    The user submitted is now a participant of this org.
    
    + Header
    
            Location: /orgs/2/participants/2

### Query user [GET /orgs/{org_id}/participants/{user_id}]

Returns the user object of an org participant.

+ Request

    + Headers
    
            Authorization: Bearer JWT

+ Response 200 (application/json)

    + Attributes (User)

+ Response 404 (application/json)

    The user may not exist, or the authenticated user may not have permission to view it.
    
    + Body

## Org Moderator collection [/orgs/{id}/moderators]

### Query moderators [GET]

Returns a list of moderators of a given org.

+ Request

    + Headers
    
            Authorization: Bearer JWT
            
+ Response 200 (application/json)
    
    + Attributes (array[User])

+ Response 403

    The authenticated user must be a mod of this organization.

    + Body

### Add user [POST]

Makes a user a mod of an org. The authenticated user must be a moderator itself.

+ Request (application/json)

    + Headers
    
            Authorization: Bearer JWT
            
    + Attributes
        + user_id: 2 (number) - The user to make a moderator of this organization.

+ Response 204 (application/json)

    The user submitted is now a moderator of this org.
    
    + Header
    
            Location: /orgs/2/moderators/2

### Query user [GET /orgs/{org_id}/moderators/{user_id}]

Returns the user object of an org moderator.

+ Request

    + Headers
    
            Authorization: Bearer JWT
            
+ Response 200 (application/json)

    + Attributes (User)

+ Response 404 (application/json)

    The user may not exist, or the authenticated user may not have permission to view it.
    
    + Body
    
## Day State [/orgs/{org_id}/daystates]

+ Attributes
    + id: 1 (number) - The ID of the day state.
    + Include Day State Create

### Query state collection [GET]

Return information about an org day state.

+ Parameters
    + org_id: 2 (number) - The org whose states are to be queried.

+ Request

    The authenticated user must be a participant or moderator of the org to query states.

    + Header

            Authorization: Bearer JWT

+ Response 200 (application/json)
    + Attributes (array[Day State])

### Create a state [POST]

Creates a new day state associated with a given organization.

+ Parameters
    + org_id: 2 (number) - The org that will receive the new state.

+ Request

    The authenticated user must moderate the org

    + Header

            Authorization: Bearer JWT

    + Attributes (Day State Create)

+ Response 201 (application/json)
    + Attributes (Day State)

### Query a state [GET /orgs/{org_id}/daystates/{daystate_id}]

Returns a particular day state object.

+ Request

    + Header

            Authorization: Bearer JWT

+ Response 200 (application/json)
    + Attributes (Day State)

### Update a state [PUT /orgs/{org_id}/daystates/{daystate_id}]

Changes the identifier and/or greeting of a day state.

+ Request (application/json)

    + Header

            Authorization: Bearer JWT

    + Attributes
        + identifier: `A` (string, optional)
        + greeting: `Updated greeting - A day` (string, optional)

+ Response 200 (application/json)

    + Attributes (Day State)

### Get the current day state [GET /orgs/{org_id}/daystates/current]

Returns the current day state, this will change on a day by day basis.

+ Request

    + Header

            Authorization: Bearer JWT

+ Response 200 (application/json)

    + Attributes (Day State)

+ Response 404 (application/json)

    This occurs when an org has no rules defined for day states (or no day states to begin with).

    + Body

## Group Users

## User [/users]

+ Attributes

    + id (number)
    + first_name (string)
    + last_name (string)
    + email (string)
    + moderates (array[Org])
    + participates (array[Org])
    + passes (array[Pass])

### Create a user [POST]

+ Request (application/json)

    + Attributes
        + first_name: Luke (string) - User first name
        + last_name: San Antonio Bialecki (string) - User last name
        + email: `itried@gmail.com` (string) - User email (used to log in)
        + password: `iUs3tHe$aMepAs$wOrdF0rEvEritHiNg` (string) - User password

+ Response 201

    + Headers

            Location: /users/2

### Authenticate as user [POST /users/auth]

+ Request (application/json)

        {
            "email": "itried@gmail.com",
            "password": "iUs3tHe$aMepAs$wOrdF0rEvEritHiNg"
        }

+ Response 200 (application/json)

        {
            "access_token": "<JWT_TOKEN>"
        }

+ Response 403 (application/json)

        {
            "msg": "invalid username or password"
        }

## Self [/me]

### Query self [GET]

Returns an object describing the authenticated user.

+ Request

    + Header

            Authentication: Bearer JWT

+ Response 200 (application/json)

    + Body

            {
                "id": 2,
                "first_name": "Luke"
                "last_name": "San Antonio Bialecki",
                "email": "itried@gmail.com",
                "participates": [
                    {
                        "id": 2,
                        "name": "Locust Valley High School"
                    }
                ],
                "moderates": [
                    {
                        "id": 1,
                        "name": "Test org"
                    }
                ],
                "passes": [
                    {
                        "id": 3,
                        "org_id": 2,
                        "owner_id": 2,
                        "request_time": "2017-02-03:23:00:12",
                        "requested_state_id": 2,
                        "requested_spot_num": 20,
                        "assigned_time": "2017-02-04:07:42:12",
                        "assigned_state_id": 2,
                        "assigned_spot_num": 15
                    },
                    {
                        "id": 4,
                        "org_id": 2,
                        "owner_id": 2,
                        "request_time": "2017-02-06:13:55:32",
                        "requested_state_id": 2,
                        "requested_spot_num": 20,
                        "assigned_time": null,
                        "assigned_state_id": null,
                        "assigned_spot_num": null
                    }
                ]
            }

### Borrow a pass [POST /me/borrow]

Creates a request to borrow a pass on behalf of the authenticated user for every day in the date range.

+ Request

    + Header

            Authentication: Bearer JWT

    + Attributes (Date Selection)

+ Response 204

### Stop borrowing a pass [POST /me/unborrow]

Removes a request to borrow a pass on behalf of the authenticated user in a given date range.

+ Request

    + Header

            Authentication: Bearer JWT

    + Attributes (Date Selection)

+ Response 204


## Group Passes

## Pass [/passes{?org_id,user_id,verified}]

+ Attributes
    + id: 2 (number) - The pass ID
    + org_id: 1 (number) - The org that this pass belongs to
    + owner_id: 3 (number, nullable) - The user owner of the pass
    + request_time: `2017-02-03;23:00:12` (string) - Date and time of the pass request
    + requested_state_id: 2 (number) - Pass state requested by the user
    + requested_spot_num: 20 (number) - Pass spot requested by the user
    + assigned_time: `2017-02-03;23:15:12` (string, nullable) - Date and time when the pass was assigned / verified
    + assigned_state_id: 2 (number, nullable) - Pass state assigned to this pass
    + assigned_spot_num: 25 (number, nullable) - Pass spot number assigned to this pass

### Query pass collection [GET]

Filters all the passes that the user has access to.
If the user is the mod of an org, all org passes are available to filter.

+ Parameters
    + org_id (number, optional) - Return passes associated with this Org
    + user_id (number, optional) - Return passes associated with this user
    + verified (boolean, optional) - Filter verified passes. If this is null or omitted, all passes will be returned.

+ Request (application/json)

    + Header

            Authentication: Bearer JWT

+ Response 200 (application/json)

    + Attributes (array[Pass])


### Request a new pass [POST]

Requests a new pass from an Org on behalf of the authenticated user.

+ Request (application/json)

    + Header

            Authentication: Bearer JWT

    + Attributes
        + org_id: 2 (number) - The Org that the pass is to be requested from
        + state_id: 1 (number) - The requested day state of the pass
        + spot_num: 25 (number) - The requested spot number

+ Response 201 (application/json)

    Note that although the pass object exists, the org will still need to verify it for it to be useful.

    + Header

            Location: /passes/2

    + Attributes (Pass)
        + assigned_time - null
        + assigned_state_id - null
        + assigned_spot_num - null

### Query pass [GET /passes/{id}]

Get specific pass object

+ Request

    + Header

            Authorization: Bearer JWT

+ Response 200 (application/json)

    + Attributes (Pass)

+ Response 403 (application/json)

    You can only query passes that you would have access to either as an org moderator or a user!

    + Body

            {
                "msg": "not authenticated to view this pass",
                "error_code": "foreign_pass"
            }

### Delete a pass [DELETE /passes/{id}]

Deletes a pass.

+ Request

    + Header

            Authorization: Bearer JWT

+ Response 202

### Assign pass [PUT /passes/{id}]

Used to verify passes or re-assign them to different states or spot numbers.
Any changes to the pass resulting from this call will result in `assigned_time` being updated.

+ Request

    + Header

            Authorization: Bearer JWT

    + Attributes
        + state_id (number, optional) - The new state of the pass
        + spot_num (number, optional) - The new spot number of the pass

+ Response 200 (application/json)
    + Attributes (Pass)

### Lend a pass [POST /passes/{pass_id}/lend]

Creates a request to lend a pass on behalf of the user for every day in the date range.

The pass will not be lent out on days that the user does not have access to the pass,
but it is not an error to include these days in the date range.

+ Parameters
    + pass_id (number) - The pass to lend

+ Request

    + Header

            Authentication: Bearer JWT

    + Attributes (Date Selection)

+ Response 204

### Stop lending a pass [POST /passes/{pass_id}/unlend]

Removes a request to lend a pass on behalf of the user in the given date range.

+ Parameters
    + pass_id (number) - The pass to unlend

+ Request

    + Header

            Authentication: Bearer JWT

    + Attributes (Date Selection)

+ Response 204

# Data Structures

## Date
+ date: `2017-03-05` (string) - Date

## Date Range (object)
+ start_date: `2017-11-15` (string) - Start date
+ end_date: `2018-01-04` (string) - End date

## Date Selection (enum)
+ (Date)
+ (Date Range)

## Day State Create (object)
+ identifier: M (string) - A recognizable short name / character for the state
+ greeting: `Today is a Monday` (string) - The greeting used to inform clients
  of the state of the current day.
